test_fileY <- "data/UCI HAR Dataset/test/y_test.txt"
trainsetX <- read.csv(train_fileX, header = F, col.names = features[,2], sep="")
trainsetY <- read.csv(train_fileY, header = F, col.names = c("y"), sep="")
dim(trainsetY)
dim(trainsetX)
trainset <- bind_cols(trainsetY, trainsetX)
trainset[1,]
testsetX <- read.csv(test_fileX, header = F, sep="")
testsetY <- read.csv(test_fileY, header = F, sep="")
testset <- bind_cols(testsetY, testsetX)
allset <-bind_rows(trainset, testset)
dim(allset)
dim(trainset)
dim(testset)
testsetX <- read.csv(test_fileX, header = F, sep="")
testsetY <- read.csv(test_fileY, header = F, sep="")
testset <- bind_cols(testsetY, testsetX)
dim(testset)
allset <-bind_rows(trainset, testset)
dim(testset)
dim(trainset)
dim(allset)
dim(trainset)
dim(testset)
allset <-bind_rows(trainset, testset)
dim(allset)
?bind_rows
testsetX <- read.csv(test_fileX, header = F, col.names = features[,2], sep="")
testsetY <- read.csv(test_fileY, header = F, sep="")
testset <- bind_cols(testsetY, testsetX)
allset <- bind_rows(trainset, testset)
dim(allset)
testsetY <- read.csv(test_fileY, header = F, col.names= c("y"), sep="")
testset <- bind_cols(testsetY, testsetX)
allset <- bind_rows(trainset, testset)
dim(testset)
dim(allset)
allset %>%
select(contains("-mean()", "-std()"))
allset %>%
select(contains("-mean()")) %>%
head()
allset %>%
select(contains("-mean()")) %>%
head() %>%
print()
allset %>%
select(contains("-mean()")) %>%
head() %>%
print()
x <- allset %>%
select(contains("-mean()"))
head(x)
x <- allset %>%
select(y)
head(x)
x <- allset %>%
select(y, contains("-mean()"))
head(x)
features[,2]
names(allset)
x <- allset %>%
select(y, contains(".mean."))
head(x)
x <- allset %>%
select(y, contains(".mean.", ".std."))
x <- allset %>%
select(y, contains(".mean."), contains(".std."))
head(x)
allset %>%
select(y, contains(".mean."), contains(".std.")) %>%
head() %>%
print()
activities <- read.csv(activity_label_file, header=F, sep="")
activity_label_file <- "data/UCI HAR Dataset/activity_labels.txt"
activities <- read.csv(activity_label_file, header=F, sep="")
activities
activities <- read.csv(activity_label_file, header=F, col.names=c("y", "activity") sep="")
activities <- read.csv(activity_label_file, header=F, col.names=c("y", "activity"), sep="")
activities
# 2. Extracts only the measurements on
#    the mean and standard deviation for each measurement.
allset %>%
left_join(activities) %>%
select(y, activity, contains(".mean."), contains(".std.")) %>%
head() %>%
print()
# 2. Extracts only the measurements on
#    the mean and standard deviation for each measurement.
# 3. Uses descriptive activity names to name the activities in the data set
allset <- allset %>%
left_join(activities) %>%
select(y, activity, contains(".mean."), contains(".std.")) %>%
head() %>%
print()
# 2. Extracts only the measurements on
#    the mean and standard deviation for each measurement.
# 3. Uses descriptive activity names to name the activities in the data set
allset <- allset %>%
left_join(activities) %>%
select(y, activity, contains(".mean."), contains(".std.")) %>%
head()
allset <- bind_rows(trainset, testset)
# 2. Extracts only the measurements on
#    the mean and standard deviation for each measurement.
# 3. Uses descriptive activity names to name the activities in the data set
allset <- allset %>%
left_join(activities) %>%
select(y, activity, contains(".mean."), contains(".std.")) %>%
head()
# 4. Appropriately labels the data set with descriptive variable names.
names(allset)
# 4. Appropriately labels the data set with descriptive variable names.
names(allset)
names(allset)
# 4. Appropriately labels the data set with descriptive variable names.
n <- names(allset)
# 4. Appropriately labels the data set with descriptive variable names.
n <- names(allset)
head(n)
gsub("\\.\\.\\.", "", n)
head(n, 20)
n <- head(names(allset), 20)
gsub("\\.\\.\\.", "", n)
n <- gsub("\\.mean", "Mean", n)
n
n <- gsub("\\.\\.\\.", "", n)
n <- gsub("\\.mean", "Mean", n)
n
n <- gsub("Acc", "Accelerometer", n)
n
n <- gsub("Gyro", "Gyroscope", n)
n
n
# 4. Appropriately labels the data set with descriptive variable names.
n <- names(allset)
n
n[67]
# 4. Appropriately labels the data set with descriptive variable names.
n <- names(allset)
n <- head(names(allset), 20)
n <- gsub("\\.\\.\\.", "", n)
n <- gsub("\\.mean", "Mean", n)
n <- gsub("Acc", "Accelerometer", n)
n <- gsub("Gyro", "Gyroscope", n)
n
n <- gsub("\\.std", "Std", n)
n
#n <- gsub("\\.\\.\\.", "", n)
n <- gsub("\\.", "", n)
n
subject_train_file <- "data/UCI HAR Dataset/train/subject_train.txt"
subject_test_file <- "data/UCI HAR Dataset/test/subject_test.txt"
trainSubject <- read.csv(subject_train_file, header = F, col.names=c("Subject"))
testSubject <- read.csv(subject_test_file, header = F, col.names=c("Subject"))
trainsetX <- read.csv(train_fileX, header = F, col.names = features[,2], sep="")
trainsetY <- read.csv(train_fileY, header = F, col.names = c("ActivityCode"), sep="")
trainSubject <- read.csv(subject_train_file, header = F, col.names=c("Subject"))
trainset <- bind_cols(trainSubject, trainsetY, trainsetX)
testsetX <- read.csv(test_fileX, header = F, col.names = features[,2], sep="")
testsetY <- read.csv(test_fileY, header = F, col.names= c("ActivityCode"), sep="")
testSubject <- read.csv(subject_test_file, header = F, col.names=c("Subject"))
testset <- bind_cols(testSubject, testsetY, testsetX)
allset <- bind_rows(trainset, testset)
# 2. Extracts only the measurements on
#    the mean and standard deviation for each measurement.
# 3. Uses descriptive activity names to name the activities in the data set
allset <- allset %>%
left_join(activities) %>%
select(ActivityCode, Activity, contains(".mean."), contains(".std.")) %>%
head()
testset
head(testset)
head(testset, 1)
trainset[1, c(1,3)]
trainsetY <- read.csv(train_fileY, header = F, col.names = c("ActivityCode"), sep="")
trainSubject <- read.csv(subject_train_file, header = F, col.names=c("Subject"))
trainset <- bind_cols(trainSubject, trainsetY, trainsetX)
trainset[1, c(1,3)]
trainsetY
head(trainsetY)
head(trainset)
trainset[1, 1:3]
testset[1, 1:3]
allset <- bind_rows(trainset, testset)
activities
activities <- read.csv(activity_label_file, header=F, col.names=c("ActivityCode", "Activity"), sep="")
# 2. Extracts only the measurements on
#    the mean and standard deviation for each measurement.
# 3. Uses descriptive activity names to name the activities in the data set
allset <- allset %>%
left_join(activities) %>%
select(ActivityCode, Activity, contains(".mean."), contains(".std.")) %>%
head()
head(allset)
# 2. Extracts only the measurements on
#    the mean and standard deviation for each measurement.
# 3. Uses descriptive activity names to name the activities in the data set
allset <- allset %>%
left_join(activities) %>%
select(Subject, ActivityCode, Activity, contains(".mean."), contains(".std.")) %>%
head()
head(allset)
# 2. Extracts only the measurements on
#    the mean and standard deviation for each measurement.
# 3. Uses descriptive activity names to name the activities in the data set
allset <- allset %>%
left_join(activities) %>%
select(Subject, ActivityCode, Activity, contains(".mean."), contains(".std.")) %>%
head()
allset[1, 1:5]
trainset <- bind_cols(trainSubject, trainsetY, trainsetX)
testset <- bind_cols(testSubject, testsetY, testsetX)
trainset[1, c(1,3)]
trainset[1, 1:3]
testset[1, 1:3]
trainset[1, 1:3]
allset[1, 1:3]
allset <- bind_rows(trainset, testset)
allset[1, 1:3]
# 2. Extracts only the measurements on
#    the mean and standard deviation for each measurement.
# 3. Uses descriptive activity names to name the activities in the data set
allset <- allset %>%
left_join(activities) %>%
select(Subject, ActivityCode, Activity, contains(".mean."), contains(".std.")) %>%
head()
allset[1, 1:5]
# 2. Extracts only the measurements on
#    the mean and standard deviation for each measurement.
# 3. Uses descriptive activity names to name the activities in the data set
allset <- allset %>%
left_join(activities) %>%
select(Subject, ActivityCode, Activity, contains(".mean."), contains(".std.")) %>%
head(100)
# 4. Appropriately labels the data set with descriptive variable names.
n <- names(allset)
n <- head(names(allset), 20)
n <- gsub("\\.mean", "Mean", n)
n <- gsub("\\.std", "Std", n)
n <- gsub("Acc", "Accelerometer", n)
n <- gsub("Gyro", "Gyroscope", n)
#n <- gsub("\\.\\.\\.", "", n)
n <- gsub("\\.", "", n)
#n <- gsub("\\.\\.\\.", "", n)
n <- gsub("\\.", "", n)
names(allset) <- n
# 5. From the data set in step 4, creates a second,
#    independent tidy data set with the average of each variable
#    for each activity and each subject.
avgset <- allset %>%
group_by(Subject, Activity) %>%
mean()
# 5. From the data set in step 4, creates a second,
#    independent tidy data set with the average of each variable
#    for each activity and each subject.
avgset <- allset %>%
group_by(Subject, Activity) %>%
count()
# 5. From the data set in step 4, creates a second,
#    independent tidy data set with the average of each variable
#    for each activity and each subject.
avgset <- allset %>%
group_by(Subject, Activity) %>%
count(na.rm=T)
# 5. From the data set in step 4, creates a second,
#    independent tidy data set with the average of each variable
#    for each activity and each subject.
avgset <- allset %>%
group_by(Subject, Activity) %>%
summarise_all()
# 5. From the data set in step 4, creates a second,
#    independent tidy data set with the average of each variable
#    for each activity and each subject.
avgset <- allset %>%
group_by(Subject, Activity) %>%
summarise_all(funs(mean))
# 5. From the data set in step 4, creates a second,
#    independent tidy data set with the average of each variable
#    for each activity and each subject.
avgset <- allset %>%
group_by(Subject, Activity) %>%
summarise_all(funs(mean, na.rm=T))
names(allset)
n
n
# 4. Appropriately labels the data set with descriptive variable names.
n <- names(allset)
#n <- names(allset), 20)
n <- gsub("\\.mean", "Mean", n)
n <- gsub("\\.std", "Std", n)
n <- gsub("Acc", "Accelerometer", n)
n <- gsub("Gyro", "Gyroscope", n)
#n <- gsub("\\.\\.\\.", "", n)
n <- gsub("\\.", "", n)
names(allset) <- n
# 5. From the data set in step 4, creates a second,
#    independent tidy data set with the average of each variable
#    for each activity and each subject.
avgset <- allset %>%
group_by(Subject, Activity) %>%
summarise_all(funs(mean, na.rm=T))
n
# 2. Extracts only the measurements on
#    the mean and standard deviation for each measurement.
# 3. Uses descriptive activity names to name the activities in the data set
allset <- allset %>%
left_join(activities) %>%
select(Subject, ActivityCode, Activity, contains(".mean."), contains(".std.")) %>%
head(100)
allset <- bind_rows(trainset, testset)
# 2. Extracts only the measurements on
#    the mean and standard deviation for each measurement.
# 3. Uses descriptive activity names to name the activities in the data set
allset <- allset %>%
left_join(activities) %>%
select(Subject, ActivityCode, Activity, contains(".mean."), contains(".std.")) %>%
head(100)
# 4. Appropriately labels the data set with descriptive variable names.
n <- names(allset)
#n <- names(allset), 20)
n <- gsub("\\.mean", "Mean", n)
n <- gsub("\\.std", "Std", n)
n <- gsub("Acc", "Accelerometer", n)
n <- gsub("Gyro", "Gyroscope", n)
#n <- gsub("\\.\\.\\.", "", n)
n <- gsub("\\.", "", n)
n
names(allset) <- n
names(allset)
# 5. From the data set in step 4, creates a second,
#    independent tidy data set with the average of each variable
#    for each activity and each subject.
avgset <- allset %>%
group_by(Subject, Activity) %>%
summarise_all(funs(mean, na.rm=T))
# 5. From the data set in step 4, creates a second,
#    independent tidy data set with the average of each variable
#    for each activity and each subject.
avgset <- allset %>%
group_by(Subject, Activity) %>%
summarise_all(funs(mean))
head(avgset, 1)
head(avgset, 1)
avgset[1000, 1:10]
avgset[500, 1:10]
avgset[50, 1:10]
avgset[10, 1:10]
dim(avgset)
avgset[4, 1:10]
#install.packages(c("tidyr", "dplyr"))
#library(tidyr)
library(dplyr)
if (!file.exists("data")){
dir.create("data")
download.file(paste0(
"https://d396qusza40orc.cloudfront.net/",
"getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
), "data/har.zip")
unzip("data/har.zip", exdir = "data")
}
# 1. Merges the training and the test sets to create one data set.
features_file       <- "data/UCI HAR Dataset/features.txt"
activity_label_file <- "data/UCI HAR Dataset/activity_labels.txt"
train_fileX         <- "data/UCI HAR Dataset/train/X_train.txt"
train_fileY         <- "data/UCI HAR Dataset/train/y_train.txt"
subject_train_file  <- "data/UCI HAR Dataset/train/subject_train.txt"
test_fileX          <- "data/UCI HAR Dataset/test/X_test.txt"
test_fileY          <- "data/UCI HAR Dataset/test/y_test.txt"
subject_test_file   <- "data/UCI HAR Dataset/test/subject_test.txt"
features        <- read.csv(features_file, header=F, stringsAsFactors = F, sep="")
activities      <- read.csv(activity_label_file, header=F, col.names=c("ActivityCode", "Activity"), sep="")
trainsetX       <- read.csv(train_fileX, header = F, col.names = features[,2], sep="")
trainsetY       <- read.csv(train_fileY, header = F, col.names = c("ActivityCode"), sep="")
trainSubject    <- read.csv(subject_train_file, header = F, col.names=c("Subject"))
trainset        <- bind_cols(trainSubject, trainsetY, trainsetX)
testsetX        <- read.csv(test_fileX, header = F, col.names = features[,2], sep="")
testsetY        <- read.csv(test_fileY, header = F, col.names= c("ActivityCode"), sep="")
testSubject     <- read.csv(subject_test_file, header = F, col.names=c("Subject"))
testset         <- bind_cols(testSubject, testsetY, testsetX)
allset          <- bind_rows(trainset, testset)
# 2. Extracts only the measurements on
#    the mean and standard deviation for each measurement.
# 3. Uses descriptive activity names to name the activities in the data set
allset <- allset %>%
left_join(activities) %>%
select(Subject, ActivityCode, Activity, contains(".mean."), contains(".std.")) %>%
head(100)
# 4. Appropriately labels the data set with descriptive variable names.
n <- names(allset)
n <- gsub("\\.mean", "Mean", n)
n <- gsub("\\.std", "Std", n)
n <- gsub("Acc", "Accelerometer", n)
n <- gsub("Gyro", "Gyroscope", n)
n <- gsub("\\.", "", n)n
names(allset) <- n
n <- gsub("\\.", "", n)
names(allset) <- n
# 5. From the data set in step 4, creates a second,
#    independent tidy data set with the average of each variable
#    for each activity and each subject.
avgset <- allset %>%
group_by(Subject, Activity) %>%
summarise_all(funs(mean))
avgset
# 5. From the data set in step 4, creates a second,
#    independent tidy data set with the average of each variable
#    for each activity and each subject.
avgset <- allset %>%
filter(-ActivityCode) %>%
group_by(Subject, Activity) %>%
summarise_all(funs(mean))
# 5. From the data set in step 4, creates a second,
#    independent tidy data set with the average of each variable
#    for each activity and each subject.
avgset <- allset %>%
select(-ActivityCode) %>%
group_by(Subject, Activity) %>%
summarise_all(funs(mean))
avgset
# 2. Extracts only the measurements on
#    the mean and standard deviation for each measurement.
# 3. Uses descriptive activity names to name the activities in the data set
allset <- allset %>%
left_join(activities) %>%
select(Subject, Activity, contains(".mean."), contains(".std.")) %>%
head(100)
# 4. Appropriately labels the data set with descriptive variable names.
n <- names(allset)
n <- gsub("\\.mean", "Mean", n)
n <- gsub("\\.std", "Std", n)
n <- gsub("Acc", "Accelerometer", n)
n <- gsub("Gyro", "Gyroscope", n)
n <- gsub("\\.", "", n)
names(allset) <- n
# 5. From the data set in step 4, creates a second,
#    independent tidy data set with the average of each variable
#    for each activity and each subject.
avgset <- allset %>%
group_by(Subject, Activity) %>%
summarise_all(funs(mean))
avgset
allset          <- bind_rows(trainset, testset)
# 2. Extracts only the measurements on
#    the mean and standard deviation for each measurement.
# 3. Uses descriptive activity names to name the activities in the data set
allset <- allset %>%
left_join(activities) %>%
select(Subject, Activity, contains(".mean."), contains(".std.")) %>%
head(100)
names(allset) <- n
# 5. From the data set in step 4, creates a second,
#    independent tidy data set with the average of each variable
#    for each activity and each subject.
avgset <- allset %>%
group_by(Subject, Activity) %>%
summarise_all(funs(mean))
# 4. Appropriately labels the data set with descriptive variable names.
n <- names(allset)
n <- gsub("\\.mean", "Mean", n)
n <- gsub("\\.std", "Std", n)
n <- gsub("Acc", "Accelerometer", n)
n <- gsub("Gyro", "Gyroscope", n)
n <- gsub("\\.", "", n)
names(allset) <- n
# 5. From the data set in step 4, creates a second,
#    independent tidy data set with the average of each variable
#    for each activity and each subject.
avgset <- allset %>%
group_by(Subject, Activity) %>%
summarise_all(funs(mean))
allset          <- bind_rows(trainset, testset)
# 2. Extracts only the measurements on
#    the mean and standard deviation for each measurement.
# 3. Uses descriptive activity names to name the activities in the data set
allset <- allset %>%
left_join(activities) %>%
select(Subject, Activity, contains(".mean."), contains(".std.")) %>%
head(100)
# 4. Appropriately labels the data set with descriptive variable names.
n <- names(allset)
n <- gsub("\\.mean", "Mean", n)
n <- gsub("\\.std", "Std", n)
n <- gsub("Acc", "Accelerometer", n)
n <- gsub("Gyro", "Gyroscope", n)
n <- gsub("\\.", "", n)
names(allset) <- n
# 5. From the data set in step 4, creates a second,
#    independent tidy data set with the average of each variable
#    for each activity and each subject.
avgset <- allset %>%
group_by(Subject, Activity) %>%
summarise_all(funs(mean))
avgset
#install.packages(c("tidyr", "dplyr"))
#library(tidyr)
library(dplyr)
if (!file.exists("data")){
dir.create("data")
download.file(paste0(
"https://d396qusza40orc.cloudfront.net/",
"getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
), "data/har.zip")
unzip("data/har.zip", exdir = "data")
}
"abcd" %>%
gsub(pattern="a", replacement = "1")
"abcd" %>%
gsub(pattern="a", replacement = "1") %>%
gsub(pattern="d", replacement = "9")
gsub(pattern="a", replacement = "1")
par("bg")
